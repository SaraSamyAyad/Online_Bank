
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import static java.lang.Math.log;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.net.*;
public class server extends javax.swing.JFrame {

    /**
     * Creates new form server
     */
    static String s="client"; 
    public server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 255, 255));
        jPanel1.setFont(new java.awt.Font("Times New Roman", 3, 36)); // NOI18N

        jButton1.setBackground(new java.awt.Color(255, 204, 204));
        jButton1.setFont(new java.awt.Font("Times New Roman", 3, 48)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 102, 255));
        jButton1.setText("start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(65, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(71, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
// dah server zy el section bzbt
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      
        try
        {
           // JOptionPane.showMessageDialog(null, s);
         /*   if(s.equals("server"))
            {
                

            //s.close();
        } 
            else{*/
          
      ServerSocket ss = new ServerSocket(1111);
     
 //JOptionPane.showMessageDialog(null, "client went to run");
         
               while (true)
            {
               
               Socket c = ss.accept();
               //   JOptionPane.showMessageDialog(null, 1);
                clientHandler ch = new clientHandler(c);
                 ch.run();
                
               new Thread(ch);
              //  t.start();
               //   JOptionPane.showMessageDialog(null, s);
             if(s.equals("server"))
             {
                 JOptionPane.showMessageDialog(null, 1);
                 try{
                 ServerSocket soc = new ServerSocket(1234);
                while(true)
                {
                    JOptionPane.showMessageDialog(null, 2);
                    Socket cc=soc.accept();
                    JOptionPane.showMessageDialog(null, "con");
             DataOutputStream dos = new DataOutputStream(cc.getOutputStream());
            DataInputStream dis = new DataInputStream(cc.getInputStream());
            while (true)
                {
                    String uname = dis.readUTF();
                    String pass = dis.readUTF();
                    Double amount = dis.readDouble();
                   PreparedStatement ps;
                     ResultSet rs;
             String query="SELECT * FROM `client` WHERE `Username` =? AND `password` =?";
        try {
            ps=Myconnection.getconnection().prepareStatement(query);
            ps.setString(1, uname);
             ps.setString(2, pass);
            rs=ps.executeQuery();
            if(rs.next())
            {
               
                  PreparedStatement pse;
                    ResultSet rse;
                        double inii=0;
                      
           String query9="SELECT * FROM `client` WHERE `Username` =?   ";
              
         try {
            pse=Myconnection.getconnection().prepareStatement(query9);
            pse.setString(1, uname);
            

            rse=pse.executeQuery();
            if(rse.next())
            {
              inii = rse.getDouble(6);
                 //JOptionPane.showMessageDialog(null, inii+"abl mazawd");
                inii+=amount;
          //JOptionPane.showMessageDialog(null, inii+"ba3d ma azad");
        //    ps.setString(2, amount);
            }
           
           
        } catch (SQLException ex) {
            System.out.println("Something went wrong ");
        }
         String query8="update client set amount = ? where Username = ?";
        //  JOptionPane.showMessageDialog(null, username);
        try {
           pse=Myconnection.getconnection().prepareStatement(query8);
         pse.setString   (1,Double.toString(inii) );
      pse.setString(2, uname);

      pse.executeUpdate();
      
                dos.writeUTF("done");
           
        } catch (SQLException ex) {
            System.out.println("Something went wrong ");
        }
                
            }
            else
            {
                  dos.writeUTF("Renter correct password or username "); 
            }
         
        } catch (SQLException ex) {
            System.out.print("error");
        }
        JOptionPane.showMessageDialog(null, "break");
        break;
                }
               
                //5. close comm with client
                dos.close();
                dis.close();
                cc.close();
                 new Thread(ch);
                 s.equals("client");

                         }
                 }      catch (IOException ex)
        {
            System.out.println("Something went wrong");
        }
             }
                    // JOptionPane.showMessageDialog(null, s);
            
             
            }
        }
              
            
             catch (IOException ex)
        {
            System.out.println("Something went wrong");
        }
    
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new server().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
